name: Release Build

# Least privilege permissions for immutable releases
permissions:
  contents: write
  packages: read

on:
  push:
    tags:
      - 'v*.*.*'

# Immutable release practices
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false  # Prevent release cancellation

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          fetch-depth: 0

      - name: Install git-cliff
        run: cargo install git-cliff

      - name: Generate release notes
        run: |
          git cliff --tag ${{ github.ref_name }} --strip header > release_notes.md
          CHANGELOG_CONTENT=$(cat release_notes.md)
          # If no content found, use a default message
          if [ -z "$CHANGELOG_CONTENT" ]; then
            CHANGELOG_CONTENT="Release ${{ github.ref_name }}"
          fi
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        run: |
          # Check if release already exists
          if gh release view "${{ github.ref_name }}" >/dev/null 2>&1; then
            echo "Release ${{ github.ref_name }} already exists, updating description..."
            gh release edit "${{ github.ref_name }}" --notes "$CHANGELOG_CONTENT"
          else
            echo "Creating new release ${{ github.ref_name }}..."
            if [[ "${{ github.ref_name }}" == *"-"* ]]; then
              gh release create ${{ github.ref_name }} \
                --title "Release ${{ github.ref_name }}" \
                --notes "$CHANGELOG_CONTENT" \
                --prerelease
            else
              gh release create ${{ github.ref_name }} \
                --title "Release ${{ github.ref_name }}" \
                --notes "$CHANGELOG_CONTENT"
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache cargo registry
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create and upload archive
      shell: bash
      run: |
        binary_name="code_guardian_cli${{ matrix.suffix }}"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          archive_name="code-guardian-${{ matrix.target }}.zip"
          cp "target/${{ matrix.target }}/release/${binary_name}" .
          7z a "${archive_name}" "${binary_name}" README.md
        else
          archive_name="code-guardian-${{ matrix.target }}.tar.gz"
          cp "target/${{ matrix.target }}/release/${binary_name}" .
          tar czf "${archive_name}" "${binary_name}" README.md
        fi
        gh release upload ${{ github.ref_name }} "./${archive_name}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}