name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Determine if prerelease
      run: |
        if [[ "${{ github.ref_name }}" == *"-"* ]]; then
          echo "prerelease=true" >> $GITHUB_ENV
        else
          echo "prerelease=false" >> $GITHUB_ENV
        fi
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: ${{ env.prerelease }}

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create archive
      shell: bash
      run: |
        binary_name="code-guardian-cli${{ matrix.suffix }}"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          archive_name="code-guardian-${{ matrix.target }}.zip"
          cp "target/${{ matrix.target }}/release/${binary_name}" .
          7z a "${archive_name}" "${binary_name}" README.md
        else
          archive_name="code-guardian-${{ matrix.target }}.tar.gz"
          cp "target/${{ matrix.target }}/release/${binary_name}" .
          tar czf "${archive_name}" "${binary_name}" README.md
        fi
        echo "ARCHIVE_NAME=${archive_name}" >> $GITHUB_ENV
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ env.ARCHIVE_NAME }}
        asset_name: ${{ env.ARCHIVE_NAME }}
        asset_content_type: application/octet-stream