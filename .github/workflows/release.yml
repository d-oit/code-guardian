name: Release Management

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
          - prerelease

permissions:
  contents: write
  pull-requests: write
  id-token: write  # For signing artifacts

env:
  CARGO_TERM_COLOR: always

jobs:
  # Step 1: Release Please - Automated Release Management
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Create Release
      run: |
        if [[ "${{ github.ref_name }}" == *"-"* ]]; then
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --generate-notes \
            --prerelease
        else
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --generate-notes
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Quality Checks
        run: |
          echo "üîç Running release quality checks..."
          cargo fmt --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo test --all-features
          cargo doc --no-deps --all-features

      - name: Security Audit
        run: |
          cargo install cargo-audit
          cargo audit

  # Step 3: Build Multi-Platform Release Binaries
  build-release:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
            archive: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ""
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: ".exe"
            archive: zip
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""
            archive: tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create and upload archive
      shell: bash
      run: |
        binary_name="code_guardian_cli${{ matrix.suffix }}"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          archive_name="code-guardian-${{ matrix.target }}.zip"
          cp "target/${{ matrix.target }}/release/${binary_name}" .
          7z a "${archive_name}" "${binary_name}" README.md
        else
          archive_name="code-guardian-${{ matrix.target }}.tar.gz"
          cp "target/${{ matrix.target }}/release/${binary_name}" .
          tar czf "${archive_name}" "${binary_name}" README.md
        fi
        gh release upload ${{ github.ref_name }} "./${archive_name}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
