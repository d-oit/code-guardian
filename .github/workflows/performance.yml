name: Performance & Benchmarking

# Least privilege permissions for performance testing
permissions:
  contents: read
  pull-requests: write
  checks: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly performance benchmarks
    - cron: '0 2 * * 1'
  workflow_dispatch:

concurrency:
  group: performance-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SCCACHE_GHA_ENABLED: "false"
  # RUSTC_WRAPPER: "sccache"  # Disabled due to service unavailability

jobs:
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

    - name: Install sccache
      uses: mozilla-actions/sccache-action@362fd1f28aa03b767e542bf88ec3b7432d9784c8

    - name: Install Rust
      uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921

    - name: Cache cargo registry
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache target
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
      with:
        path: target
        key: ${{ runner.os }}-bench-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: |
        if find . -name "*.rs" -path "*/benches/*" | grep -q .; then
          timeout 600 cargo bench --workspace
        else
          echo "No benchmarks found, skipping..."
        fi

   performance-regression:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
      with:
        fetch-depth: 0

    - name: Install sccache
      uses: mozilla-actions/sccache-action@362fd1f28aa03b767e542bf88ec3b7432d9784c8

    - name: Install Rust
      uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921

    - name: Install hyperfine for timing
      run: cargo install hyperfine

    - name: Cache target
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
      with:
        path: target
        key: ${{ runner.os }}-perf-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --workspace

    - name: Performance timing tests
      run: |
        echo "## Performance Timing Results" >> $GITHUB_STEP_SUMMARY

        # Time basic scan operation (if applicable)
        if [ -f "target/release/code-guardian" ]; then
          echo "### Binary Performance" >> $GITHUB_STEP_SUMMARY
          hyperfine --warmup 3 'target/release/code-guardian --help' --export-markdown perf-results.md
          cat perf-results.md >> $GITHUB_STEP_SUMMARY
        fi

        # Time compilation
        echo "### Compilation Performance" >> $GITHUB_STEP_SUMMARY
        hyperfine --warmup 1 'cargo check --workspace' --export-markdown compile-results.md
        cat compile-results.md >> $GITHUB_STEP_SUMMARY

    - name: Memory usage check
      run: |
        echo "### Memory Usage" >> $GITHUB_STEP_SUMMARY
        /usr/bin/time -v cargo build --release 2>&1 | grep -E "(Maximum resident|User time|System time)" >> $GITHUB_STEP_SUMMARY || true

    - name: Binary size check
      run: |
        echo "### Binary Sizes" >> $GITHUB_STEP_SUMMARY
        echo "| Crate | Size |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY

        if [ -f "target/release/code-guardian" ]; then
          size=$(ls -lh target/release/code-guardian | awk '{print $5}')
          echo "| code-guardian | $size |" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload performance results
      uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4
      with:
        name: performance-results
        path: |
          perf-results.md
          compile-results.md

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

    - name: Install sccache
      uses: mozilla-actions/sccache-action@362fd1f28aa03b767e542bf88ec3b7432d9784c8

    - name: Install Rust
      uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921

    - name: Cache target
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
      with:
        path: target
        key: ${{ runner.os }}-load-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build for load testing
      run: cargo build --release --workspace

    - name: Run load tests
      run: |
        echo "## Load Testing Results" >> $GITHUB_STEP_SUMMARY

        # Test with different input sizes if applicable
        echo "### Concurrent Operations Test" >> $GITHUB_STEP_SUMMARY

        # Simple concurrency test
        timeout 30s bash -c '
        for i in {1..10}; do
          cargo check --quiet &
        done
        wait
        echo "Concurrent cargo check operations completed"
        ' >> $GITHUB_STEP_SUMMARY 2>&1 || echo "Load test completed with timeout" >> $GITHUB_STEP_SUMMARY

  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [benchmark, performance-regression, load-testing]
    if: always()
    steps:
    - name: Performance Summary
      run: |
        echo "## 🚀 Performance Testing Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.benchmark.result }}" == "success" ]]; then
          echo "✅ Benchmarks completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Benchmark execution failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.performance-regression.result }}" == "success" ]]; then
          echo "✅ Performance regression checks passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Performance regression detected" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.load-testing.result }}" == "success" ]]; then
          echo "✅ Load testing completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Load testing failed" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor benchmark results for performance regressions" >> $GITHUB_STEP_SUMMARY
        echo "- Review binary sizes for optimization opportunities" >> $GITHUB_STEP_SUMMARY
        echo "- Consider adding more comprehensive benchmarks for critical paths" >> $GITHUB_STEP_SUMMARY