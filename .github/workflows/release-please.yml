name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: rust
          package-name: code-guardian
          changelog-types: |
            [
              {"type":"feat","section":"Features","hidden":false},
              {"type":"fix","section":"Bug Fixes","hidden":false},
              {"type":"perf","section":"Performance Improvements","hidden":false},
              {"type":"deps","section":"Dependencies","hidden":false},
              {"type":"revert","section":"Reverts","hidden":false},
              {"type":"docs","section":"Documentation","hidden":false},
              {"type":"style","section":"Styles","hidden":true},
              {"type":"refactor","section":"Code Refactoring","hidden":false},
              {"type":"test","section":"Tests","hidden":true},
              {"type":"build","section":"Build System","hidden":true},
              {"type":"ci","section":"Continuous Integration","hidden":true},
              {"type":"chore","section":"Miscellaneous","hidden":true}
            ]

  # Build and upload release artifacts if a release was created
  build-release:
    runs-on: ${{ matrix.os }}
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install musl tools (for musl target)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} --bin code-guardian-cli
    
    - name: Create archive
      shell: bash
      run: |
        binary_name="code-guardian-cli${{ matrix.suffix }}"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          archive_name="code-guardian-${{ matrix.target }}.zip"
          cp "target/${{ matrix.target }}/release/${binary_name}" .
          7z a "${archive_name}" "${binary_name}" README.md LICENSE
        else
          archive_name="code-guardian-${{ matrix.target }}.tar.gz"
          cp "target/${{ matrix.target }}/release/${binary_name}" .
          tar czf "${archive_name}" "${binary_name}" README.md LICENSE
        fi
        echo "ARCHIVE_NAME=${archive_name}" >> $GITHUB_ENV
    
    - name: Upload Release Artifact
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release upload ${{ needs.release-please.outputs.tag_name }} ${{ env.ARCHIVE_NAME }}

  # Publish to crates.io if a release was created
  publish-crates:
    runs-on: ubuntu-latest
    needs: [release-please, build-release]
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        # Publish crates in dependency order
        echo "Publishing core crate..."
        cd crates/core
        cargo publish --token $CARGO_REGISTRY_TOKEN
        cd ../..
        
        echo "Waiting for core crate to be available..."
        sleep 30
        
        echo "Publishing storage crate..."
        cd crates/storage  
        cargo publish --token $CARGO_REGISTRY_TOKEN
        cd ../..
        
        echo "Waiting for storage crate to be available..."
        sleep 30
        
        echo "Publishing output crate..."
        cd crates/output
        cargo publish --token $CARGO_REGISTRY_TOKEN
        cd ../..
        
        echo "Waiting for output crate to be available..."
        sleep 30
        
        echo "Publishing CLI crate..."
        cd crates/cli
        cargo publish --token $CARGO_REGISTRY_TOKEN
        cd ../..
        
        echo "All crates published successfully!"

  # Update documentation after release
  update-docs:
    runs-on: ubuntu-latest
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build documentation
      run: cargo doc --no-deps --workspace --document-private-items
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        cname: code-guardian-docs.d-oit.com  # Optional: custom domain