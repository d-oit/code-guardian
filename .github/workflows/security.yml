name: Security & Compliance

# Least privilege permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read
  packages: read

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sunday at 2 AM UTC
  workflow_dispatch:

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install sccache
      uses: mozilla-actions/sccache-action@v0.0.4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      uses: taiki-e/install-action@cargo-audit

    - name: Run security audit
      run: cargo audit --format json | tee audit-results.json

    - name: Install cargo-deny
      uses: taiki-e/install-action@cargo-deny

    - name: Run cargo-deny checks
      run: |
        cargo deny check --format json | tee deny-results.json || echo "cargo-deny found issues"
        cargo deny check advisories
        cargo deny check licenses
        cargo deny check bans
        cargo deny check sources

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-reports
        path: |
          audit-results.json
          deny-results.json

  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install sccache
      uses: mozilla-actions/sccache-action@v0.0.4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit with database update
      run: |
        cargo install cargo-audit
        cargo audit --db ~/.cargo/advisory-db

    - name: Run comprehensive vulnerability scan
      run: |
        echo "## 🔍 Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
        cargo audit --format markdown >> $GITHUB_STEP_SUMMARY || echo "Vulnerabilities found - check details above" >> $GITHUB_STEP_SUMMARY

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install sccache
      uses: mozilla-actions/sccache-action@v0.0.4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-outdated
      run: cargo install cargo-outdated

    - name: Check for outdated dependencies
      run: |
        echo "## 📦 Dependency Status" >> $GITHUB_STEP_SUMMARY
        cargo outdated --format json | tee outdated.json || echo "Some dependencies are outdated" >> $GITHUB_STEP_SUMMARY

    - name: Install cargo-udeps
      run: cargo install cargo-udeps

    - name: Check for unused dependencies
      run: |
        echo "## 🗑️  Unused Dependencies" >> $GITHUB_STEP_SUMMARY
        cargo +nightly udeps --workspace --output json | tee udeps-results.json || echo "Unused dependencies check completed" >> $GITHUB_STEP_SUMMARY

    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          outdated.json
          udeps-results.json

  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install sccache
      uses: mozilla-actions/sccache-action@v0.0.4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-license
      run: cargo install cargo-license

    - name: Check licenses
      run: |
        cargo license --json > licenses.json
        cargo license --tsv > licenses.tsv

    - name: License compliance check
      run: |
        echo "## 📄 License Compliance Report" >> $GITHUB_STEP_SUMMARY
        echo "| Package | License | Version |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|---------|---------|" >> $GITHUB_STEP_SUMMARY
        tail -n +2 licenses.tsv | while IFS=$'\t' read -r package license version; do
          echo "| $package | $license | $version |" >> $GITHUB_STEP_SUMMARY
        done

    - name: Check for GPL licenses
      run: |
        if grep -q "GPL" licenses.tsv; then
          echo "::warning::GPL licensed dependencies found - review for compliance"
          echo "GPL dependencies detected:" >> $GITHUB_STEP_SUMMARY
          grep "GPL" licenses.tsv >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.tsv

  code-security-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install sccache
      uses: mozilla-actions/sccache-action@v0.0.4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Run security-focused clippy
      run: |
        echo "## 🔒 Security Clippy Results" >> $GITHUB_STEP_SUMMARY
        cargo clippy --all-targets --all-features -- \
          -W clippy::pedantic \
          -W clippy::nursery \
          -W clippy::suspicious \
          -W clippy::correctness \
          -D clippy::unwrap_used \
          -D clippy::expect_used \
          -D clippy::panic \
          -D clippy::unimplemented \
          -D clippy::todo \
          2>&1 | tee clippy-security.log || echo "Security clippy completed with warnings" >> $GITHUB_STEP_SUMMARY

    - name: Check for security issues
      run: |
        if grep -q "error\|warning" clippy-security.log; then
          echo "::warning::Security-related code issues found"
          echo "Security issues detected in code:" >> $GITHUB_STEP_SUMMARY
          grep -E "(error|warning)" clippy-security.log >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: code-security-reports
        path: clippy-security.log

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Scan for secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: TruffleHog scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-audit, vulnerability-scan, dependency-analysis, license-compliance, code-security-scan, secrets-scan]
    if: always()
    steps:
    - name: Security Summary Report
      run: |
        echo "## 🛡️ Security & Compliance Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        results=("security-audit" "vulnerability-scan" "dependency-analysis" "license-compliance" "code-security-scan" "secrets-scan")
        all_passed=true

        for check in "${results[@]}"; do
          result="${{ needs.$check.result }}"
          if [[ "$result" == "success" ]]; then
            echo "✅ $check: PASSED" >> $GITHUB_STEP_SUMMARY
          elif [[ "$result" == "skipped" ]]; then
            echo "⏭️  $check: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ $check: FAILED" >> $GITHUB_STEP_SUMMARY
            all_passed=false
          fi
        done

        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "$all_passed" == true ]]; then
          echo "### ✅ All Security Checks Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Security Issues Detected" >> $GITHUB_STEP_SUMMARY
          echo "Please review the individual job results and address any security concerns." >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Security Recommendations" >> $GITHUB_STEP_SUMMARY
        echo "- Regularly update dependencies to address known vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- Review license compliance for third-party dependencies" >> $GITHUB_STEP_SUMMARY
        echo "- Avoid using unwrap/expect in production code" >> $GITHUB_STEP_SUMMARY
        echo "- Use secret scanning to prevent credential leaks" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor cargo-audit for new security advisories" >> $GITHUB_STEP_SUMMARY