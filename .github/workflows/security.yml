name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-audit
      uses: taiki-e/install-action@cargo-audit
    
    - name: Run cargo-audit
      run: cargo audit --json > audit-results.json
      continue-on-error: true
    
    - name: Upload audit results
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: audit-results.json
    
    - name: Check audit results
      run: |
        if grep -q '"kind":"error"' audit-results.json; then
          echo "Security vulnerabilities found!"
          cargo audit
          exit 1
        else
          echo "No security vulnerabilities found."
        fi

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'rust', 'javascript' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Setup Rust (for Rust analysis)
      if: matrix.language == 'rust'
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build Rust code
      if: matrix.language == 'rust'
      run: cargo build --release
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-deny
      uses: taiki-e/install-action@cargo-deny
    
    - name: Check licenses and dependencies
      run: |
        # Create cargo-deny config if it doesn't exist
        if [ ! -f deny.toml ]; then
          cat > deny.toml << 'EOF'
        [licenses]
        allow = [
            "MIT",
            "Apache-2.0",
            "Apache-2.0 WITH LLVM-exception",
            "BSD-2-Clause",
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016",
        ]
        deny = [
            "GPL-2.0",
            "GPL-3.0",
            "AGPL-1.0",
            "AGPL-3.0",
        ]
        
        [advisories]
        vulnerability = "deny"
        unmaintained = "warn"
        yanked = "deny"
        notice = "warn"
        
        [bans]
        multiple-versions = "warn"
        wildcards = "deny"
        
        [sources]
        unknown-registry = "deny"
        unknown-git = "deny"
        allow-registry = ["https://github.com/rust-lang/crates.io-index"]
        EOF
        fi
        
        cargo deny check

  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Semgrep
      run: |
        semgrep \
          --config=auto \
          --config=security \
          --config=p/rust \
          --config=p/javascript \
          --error \
          --verbose \
          --json \
          --output=semgrep-results.json \
          .
      continue-on-error: true
    
    - name: Upload Semgrep results
      uses: actions/upload-artifact@v4
      with:
        name: semgrep-results
        path: semgrep-results.json

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, Unicode-DFS-2016